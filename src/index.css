/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;


@layer base {
  :root { /* Or :root.dark if using class-based dark mode */
    --color-brand-darkest: 22 28 31; /* As R G B values for opacity */
    --color-brand-dark: 57 62 70;
    --color-brand-primary: 0 173 181;
    --color-brand-light: 238 238 238;
    --color-brand-lightest: 255 255 255;

    /* Semantic mappings */
    --color-primary: var(--color-brand-primary);
    --color-secondary: var(--color-brand-dark); /* Example */
    --color-background: var(--color-brand-darkest);
    --color-surface: var(--color-brand-dark);
    --color-text-main: var(--color-brand-light);
    --color-text-secondary: 204 204 204; /* 204,204,204 is #CCCCCC */
  }
}


/* ... your other custom styles ... */
html {
  scroll-behavior: smooth;
}



@keyframes moving {
  50% {
    width: 100%;
  }

  100% {
    width: 0;
    right: 0;
    left: unset;
  }
}


@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}


.loader {
  display: block;
  --height-of-loader: 4px;
  --loader-color: #0071e2;
  width: 130px;
  height: var(--height-of-loader);
  border-radius: 30px;
  background-color: rgba(0,0,0,0.2);
  position: relative;
}

.loader::before {
  content: "";
  position: absolute;
  background: var(--loader-color);
  top: 0;
  left: 0;
  width: 0%;
  height: 100%;
  border-radius: 30px;
  animation: moving 1s ease-in-out infinite;
  ;
}



.sonar-grid-container {
  position: absolute; /* Will be positioned within the left half of ImpactSection */
  width: 50vw; /* Half of the viewport width */
  height: 100vh; /* Full viewport height */
  /* Fill its parent column */
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: crosshair;
  touch-action: none;
  user-select: none;
  overflow: visible; /* As per example, but be careful if it overflows its column */
  /* background: #111; /* Optional: subtle dark background for the grid area itself */
}

.sonar-dot {
  position: absolute;
  border-radius: 50%;
  background: #fff; /* White dots */
  opacity: 0.23;    /* Base opacity */
  transition: opacity 0.3s ease-out; /* Smooth transition for base opacity */
  pointer-events: none;
}

.sonar-dot.sonar-active { /* Renamed from 'sonar' to avoid conflicts */
  opacity: 1;
  transition: opacity 0.18s ease-out; /* Faster transition for active sonar ping */
  z-index: 2; /* Bring active dots to front */
  /* Optional: change color on active */
  /* background: theme('colors.purple.500'); */
}


.animate-fade-in-up {
  animation: fadeInUp 0.6s ease-out forwards;
  opacity: 0;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


.why-us-floating-card {
  position: relative;
  background: rgba(30, 41, 59, 0.7);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border-radius: 0.75rem;
}



.why-us-floating-card::before {
  content: '';
  position: absolute;
  inset: 0;
  padding: 2px;
  background: linear-gradient(135deg, 
    theme('colors.primary / 90%'),
    theme('colors.purple.500 / 90%'),
    theme('colors.pink.500 / 90%')
  );
  border-radius: inherit;
  mask: 
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  mask-composite: xor;
  -webkit-mask-composite: xor;
  z-index: -1;
}

.why-us-floating-card:hover::before {
  background: linear-gradient(135deg, 
    theme('colors.pink.500 / 90%'),
    theme('colors.purple.500 / 90%')
  );
}


